/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Policies400Error1Error } from '../errors/policies400Error1Error';
import { Policies401Error1Error } from '../errors/policies401Error1Error';
import { Policies403Error1Error } from '../errors/policies403Error1Error';
import { Policies500Error1Error } from '../errors/policies500Error1Error';
import {
  ContentType1Enum,
  contentType1EnumSchema,
} from '../models/contentType1Enum';
import {
  PoliciesRequest,
  policiesRequestSchema,
} from '../models/policiesRequest';
import {
  PoliciesResponse,
  policiesResponseSchema,
} from '../models/policiesResponse';
import {
  PoliciesResponse1,
  policiesResponse1Schema,
} from '../models/policiesResponse1';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class PolicyController extends BaseController {
  /**
   * List previously created policies
   *
   *
   * @param boostUser  UUID that identifies the user.
   * @param accept     Header to indicate that desired response type is JSON:API.
   * @return Response from the API call
   */
  async listPolicies(
    boostUser: string,
    accept?: ContentType1Enum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PoliciesResponse1>> {
    const req = this.createRequest('GET', '/policies');
    const mapped = req.prepareArgs({
      boostUser: [boostUser, string()],
      accept: [accept, optional(contentType1EnumSchema)],
    });
    req.header('Boost-User', mapped.boostUser);
    req.header('Accept', mapped.accept);
    return req.callAsJson(policiesResponse1Schema, requestOptions);
  }

  /**
   * Issues a new policy with the given the input data. Policy goes in force on the specified
   * effective_date.
   *
   *
   * @param boostUser    UUID that identifies the user.
   * @param body
   * @return Response from the API call
   */
  async postPolicy(
    boostUser: string,
    body: PoliciesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PoliciesResponse>> {
    const req = this.createRequest('POST', '/policies');
    const mapped = req.prepareArgs({
      boostUser: [boostUser, string()],
      body: [body, policiesRequestSchema],
    });
    req.header('Boost-User', mapped.boostUser);
    req.header('Content-Type', 'application/vnd.api+json');
    req.json(mapped.body);
    req.throwOn(400, Policies400Error1Error, 'Request is invalid.');
    req.throwOn(401, Policies401Error1Error, 'Unauthorized. The bearer authentication failed.');
    req.throwOn(403, Policies403Error1Error, 'Forbidden. The operation is not allowed.');
    req.throwOn(500, Policies500Error1Error, 'Internal Server Error.');
    return req.callAsJson(policiesResponseSchema, requestOptions);
  }
}
