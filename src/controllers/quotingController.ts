/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { Quotes400Error1Error } from '../errors/quotes400Error1Error';
import { Quotes401Error1Error } from '../errors/quotes401Error1Error';
import { Quotes500Error1Error } from '../errors/quotes500Error1Error';
import { QuotesRequest, quotesRequestSchema } from '../models/quotesRequest';
import { QuotesResponse, quotesResponseSchema } from '../models/quotesResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class QuotingController extends BaseController {
  /**
   * Issues a new quote.
   *
   * @param boostUser    Boost provided agent UUID that identifies the user.
   * @param body
   * @return Response from the API call
   */
  async postQuote(
    boostUser: string,
    body: QuotesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<QuotesResponse>> {
    const req = this.createRequest('POST', '/quotes');
    const mapped = req.prepareArgs({
      boostUser: [boostUser, string()],
      body: [body, quotesRequestSchema],
    });
    req.header('Boost-User', mapped.boostUser);
    req.header('Content-Type', 'application/vnd.api+json');
    req.json(mapped.body);
    req.throwOn(400, Quotes400Error1Error, 'Request is invalid.');
    req.throwOn(401, Quotes401Error1Error, 'Unauthorized. The bearer authentication failed.');
    req.throwOn(500, Quotes500Error1Error, 'Internal Server Error.');
    return req.callAsJson(quotesResponseSchema, requestOptions);
  }
}
