/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiError } from '@apimatic/core';
import { ApiResponse, RequestOptions } from '../core';
import {
  AuthOauth2Token400Error1Error,
} from '../errors/authOauth2Token400Error1Error';
import {
  AuthOauth2TokenResponse,
  authOauth2TokenResponseSchema,
} from '../models/authOauth2TokenResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class AuthenticationController extends BaseController {
  /**
   * Generates an access token which must be used on all subsequent API calls.
   *
   *
   * @param clientId      Your Client ID
   * @param clientSecret  Your Client Secret
   * @return Response from the API call
   */
  async getOAuthToken(
    clientId: string,
    clientSecret: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AuthOauth2TokenResponse>> {
    const req = this.createRequest('POST', '/auth/oauth2/token');
    const mapped = req.prepareArgs({
      clientId: [clientId, string()],
      clientSecret: [clientSecret, string()],
    });
    req.header('Content-Type', 'application/x-www-form-urlencoded');
    req.form({
      client_id: mapped.clientId,
      client_secret: mapped.clientSecret,
      grant_type: 'client_credentials',
    });
    req.throwOn(400, AuthOauth2Token400Error1Error, 'Request is invalid');
    req.throwOn(500, ApiError, 'Internal Server Error');
    req.authenticate(false);
    return req.callAsJson(authOauth2TokenResponseSchema, requestOptions);
  }
}
