/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  InsuredRisks400Error1Error,
} from '../errors/insuredRisks400Error1Error';
import {
  InsuredRisks401Error1Error,
} from '../errors/insuredRisks401Error1Error';
import {
  InsuredRisks403Error1Error,
} from '../errors/insuredRisks403Error1Error';
import {
  InsuredRisks415Error1Error,
} from '../errors/insuredRisks415Error1Error';
import {
  InsuredRisks500Error1Error,
} from '../errors/insuredRisks500Error1Error';
import {
  InsuredRisksRequest,
  insuredRisksRequestSchema,
} from '../models/insuredRisksRequest';
import {
  InsuredRisksResponse,
  insuredRisksResponseSchema,
} from '../models/insuredRisksResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class InsuredRiskController extends BaseController {
  /**
   * Creates a new insured risk to then utilize when creating a policy.
   *
   * @param boostUser    UUID that identifies the user.
   * @param body
   * @return Response from the API call
   */
  async postInsuredRisk(
    boostUser: string,
    body: InsuredRisksRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<InsuredRisksResponse>> {
    const req = this.createRequest('POST', '/insured-risks');
    const mapped = req.prepareArgs({
      boostUser: [boostUser, string()],
      body: [body, insuredRisksRequestSchema],
    });
    req.header('Boost-User', mapped.boostUser);
    req.header('Content-Type', 'application/vnd.api+json');
    req.json(mapped.body);
    req.throwOn(400, InsuredRisks400Error1Error, 'Request is invalid.');
    req.throwOn(401, InsuredRisks401Error1Error, 'Unauthorized. The bearer authentication failed.');
    req.throwOn(403, InsuredRisks403Error1Error, 'Forbidden. The operation is not allowed.');
    req.throwOn(415, InsuredRisks415Error1Error, 'Unsupported Media Type. Only JSONAPI is supported.');
    req.throwOn(500, InsuredRisks500Error1Error, 'Internal Server Error.');
    return req.callAsJson(insuredRisksResponseSchema, requestOptions);
  }
}
