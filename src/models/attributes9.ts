/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { dict, object, optional, Schema, string, unknown } from '../schema';
import { PolicyState2Enum, policyState2EnumSchema } from './policyState2Enum';
import { Status2Enum, status2EnumSchema } from './status2Enum';

/** Attributes for this object. */
export interface Attributes9 {
  /**
   * A value from the set denoting the user-selected limit of coverage. This is dependent
   * on the product's configuration.
   */
  limit?: string;
  /**
   * A value from the set denoting the user-selected deductible of coverage. This is dependent
   * on the product's configuration.
   */
  deductible?: string;
  /** The two letter state code (including Washington DC). */
  policyState: PolicyState2Enum;
  /** Effective date for when the resulting policy would go into effective should it be generated. */
  effectiveDate: string;
  /** The desired end date for the policy that results from this quote. The span from effective_date to this term_end_date must be allowable by the product's terms. */
  termEndDate: string;
  /** Any value you wish to associate with this policy such as an ID from your system. */
  externalReference?: string;
  /** Additional data about the policy. The required metadata fields are specific to the product. */
  metadata?: unknown;
  /** The date this quote was rated and set to bindable. */
  bindableOn?: string;
  /** Boost generated term premium for this quote. */
  termPremium?: string;
  /** The date this quote is valid until after which point a new quote will need to be generated. */
  validUntil?: string;
  /** The date this quote satisfied all its dependencies to become a policy. */
  convertableOn?: string;
  /** The date this quote was converted into a policy. */
  convertedOn?: string;
  /** The status of the quote. */
  status?: Status2Enum;
  /** Payment installment plans that are available for this quote */
  installmentPlans?: Record<string, unknown>;
  /** Boost generated minimum premium for this product. */
  minPremium?: string;
  /** Any state taxes that apply to this quote. */
  stateTax?: string;
  /** Any state fees that apply to this quote. */
  stateFees?: string;
  /** Any service fees that apply to this quote. */
  serviceFees?: string;
  /** Any billing fees that apply to this quote. */
  billingFees?: string;
}

export const attributes9Schema: Schema<Attributes9> = object({
  limit: ['limit', optional(string())],
  deductible: ['deductible', optional(string())],
  policyState: ['policy_state', policyState2EnumSchema],
  effectiveDate: ['effective_date', string()],
  termEndDate: ['term_end_date', string()],
  externalReference: ['external_reference', optional(string())],
  metadata: ['metadata', optional(unknown())],
  bindableOn: ['bindable_on', optional(string())],
  termPremium: ['term_premium', optional(string())],
  validUntil: ['valid_until', optional(string())],
  convertableOn: ['convertable_on', optional(string())],
  convertedOn: ['converted_on', optional(string())],
  status: ['status', optional(status2EnumSchema)],
  installmentPlans: ['installment_plans', optional(dict(unknown()))],
  minPremium: ['min_premium', optional(string())],
  stateTax: ['state_tax', optional(string())],
  stateFees: ['state_fees', optional(string())],
  serviceFees: ['service_fees', optional(string())],
  billingFees: ['billing_fees', optional(string())],
});
