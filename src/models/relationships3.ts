/**
 * Merged ApiLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, Schema } from '../schema';
import { AdditionalInsured, additionalInsuredSchema } from './additionalInsured';
import {
  AdditionalInterests,
  additionalInterestsSchema,
} from './additionalInterests';
import { Agent, agentSchema } from './agent';
import { Coverages, coveragesSchema } from './coverages';
import { Customer, customerSchema } from './customer';
import { InstallmentPlan, installmentPlanSchema } from './installmentPlan';
import { InsuredRisk, insuredRiskSchema } from './insuredRisk';
import { Parent, parentSchema } from './parent';
import { Product2, product2Schema } from './product2';

/** Items related to this policy. */
export interface Relationships3 {
  /** List of coverages that apply to this policy. */
  coverages: Coverages;
  /** The risk insured by the policy. */
  insuredRisk: InsuredRisk;
  /** Relationship containing the id that identifies the customer for this policy. */
  customer: Customer;
  /**
   * Boost supplied value representing the specific product type. The product's configuration
   * Determines allowable values, such as limit and deductible.
   */
  product: Product2;
  /** ID of parent policy. Product must also be a parent product. */
  parent: Parent;
  /** List of additional interests for this policy. */
  additionalInterests: AdditionalInterests;
  /** List of additional insured for this policy. */
  additionalInsured: AdditionalInsured;
  /** UUID of the agent. */
  agent: Agent;
  /** The Boost UUID for the `installment_plan` based on the chosen installment plan. */
  installmentPlan: InstallmentPlan;
}

export const relationships3Schema: Schema<Relationships3> = object({
  coverages: ['coverages', lazy(() => coveragesSchema)],
  insuredRisk: ['insured_risk', lazy(() => insuredRiskSchema)],
  customer: ['customer', lazy(() => customerSchema)],
  product: ['product', lazy(() => product2Schema)],
  parent: ['parent', lazy(() => parentSchema)],
  additionalInterests: [
    'additional_interests',
    lazy(() => additionalInterestsSchema),
  ],
  additionalInsured: [
    'additional_insured',
    lazy(() => additionalInsuredSchema),
  ],
  agent: ['agent', lazy(() => agentSchema)],
  installmentPlan: ['installment_plan', lazy(() => installmentPlanSchema)],
});
